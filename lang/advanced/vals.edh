{## Đ Value System #}

{## Everything is a Value
 # - Some immutable scalars / containers, some mutable containers, and the ultimate mutable thing - objects

Everything is a _value_ in Đ, every _value_ is of some _type_. Some types are immutable, the others are mutable. Also there are a handful of special values.

 #} {;
  {## Everything is a Value #}
  export everything'is'a'value = bookmark()

}


{## Special Values
 # - Some constructs and constants of special semantics
 #} {;

  {## Named Values / Term Definitions
   # - The named is the mother of ten thousand things

   #} {;
    {## Named Values / Term Definitions #}
    export edh'term'def = bookmark()

    # %% # make sure to run this cell before the ones following it
    π := 3.14

    # %% # this prints its name, not value
    repr( π )

    # %% # after arithmetics, it is no more a term,
    repr( π * 1 ) # just an immutable numeric value

    # %% # while type of a term comes from its value
    type( π )

    # %% # and Đ knows it being a term, and can show that accordingly
    show( π )

    # %% # otherwise it's can be used just like an attribute
    r = 1.58
    C = 2 * π * r

    # %#
  }

  {## Nullability
   # - The vocabulary for nothingness
   #
   # Đ attributes are nullable,
   #} {;
    {## Nullability #}
    export edh'nullability = bookmark()

    # %% # `nil` will not be printed by REPL
    nil

    # %%
    type( nil ) is nil

    # %% `null()` is the null-test procedure, relatable to the `null`
    # function as in Haskell, but semantically more like:
    #  - Negated *Truth Value Testing* as in Python
    #  https://docs.python.org/3/library/stdtypes.html#truth-value-testing
    # And
    #  - *Falsy Testing* as in JavaScript
    #  https://developer.mozilla.org/en-US/docs/Glossary/Falsy
    # For a dynamic language
    null( nil )
    # %%
    null( 0 )
    # %%
    null( 1 )

    # %% # Note a procedure value will always be *truthy*
    null( null ) # recognize the result please

    # With the mechanism to define named values (i.e. terms), some named
    # *nil* values can be defined for special purpose:

    # %%
    None
    # %%
    Nothing

    # %%
    show( None )
    # %%
    show( Nothing )

    # %%
    None == Nothing
    # %%
    None is Nothing

    # %%
    None == nil
    # %%
    None is nil

    # %%
    Nothing == nil
    # %%
    Nothing is nil

    # %#
  }

  {## Applicability
   # - We talk about the lack thereof, actually
   #} { import * './appl' # <- navigate to elaboration of Đ Applicability Semantics

    edh'na'semantics # <- follow this bookmark to learn more details

    # NA semantics is actually a special case of *Defaulting Semantics*, see:
    edh'defaulting # <- navigate to elaboration of Đ Defaulting Semantics

    # %% # NA stands for Not/Applicable, it's a literal constant in Đ
    NA

    # %% # How is it technically working?
    show( NA )

    # %% # The actually `NA` value is a defined constant term, with the
    # value in turn being a *default* expression of literal `nil`, so it
    # is technically a shorthand of `NA := default nil`
    default nil
    # %#

    edh'defaulting # <- follow this bookmark to learn more details
  }

}

{## Immutable Scalars
 # - Just common place
 #} {;
  # %% Numbers are of `Decimal` type
  type( 3 )
  # %% Strings are of `String` type
  type( 'Hello' )
  # %#
}

{## Immutable Containers
 # - Pair and ArgsPack
 #} {;

  {## Pair
   # - Technically a non-empty, appending-cons list type mandating arity >= 2

Pair is usually used for slicing specification in Đ, but not as cons list though techinically it can be used that way.

   #} {;
    # %% A vanilla pair
    3:5

    # %% A chained pair
    1:2:1:5:9
    # %#
  }


  {## Arguments Pack
   # - A super type of tuple

   #} {;
    {## Arguments Pack #}
    export edh'apk = bookmark()


  }

}

{## Mutable Containers
 # - List, Dict, and Objects
 #} {;

  # %% A list value is a mutable container
  l = [ 1, 2, 3, ]
  type( l )
  # %%
  l.push( 5, 6, )
  # %%
  l.pop()
  # %%
  l
  # %%

  # %% A dict value is also a mutable container
  d = { 'name' : 'Compl Yue', '#children' : 2, }
  type( d )
  # %%
  d.push( 'city', 'Chongqing' )
  d

  # %#
}


{## Objects
 # - A special type of value

An object is a mutable value in Đ

 #} {;
  {## Objects #}
  export edh'objs = bookmark()


}
