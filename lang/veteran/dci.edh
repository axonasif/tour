{## Data Context Interaction
 # - Separate perspectives of a program

  https://en.wikipedia.org/wiki/Data,_context_and_interaction

 #} {;
  {## Data Context Interaction #}
  export edh'dci = bookmark()

  # %% #

  {##
   # Root class of role classes

All role classes should suport instance construction from a keyword argument named `delegate`

   #}
  class Role {

    {## Symbolic name for Domain Data Object #}
    symbol @ddo

    method __init__( *, @ddo as this.@ddo, *** ) extends this.@ddo

    method __repr__() {
      repr(this.@ddo) ++ ' ~assuming~ ' ++ repr(constructor(that))
    }

  }

  # %% #

  class SomeData { extends Role

  }

  # %% #

  {##
   # Let an object assuming a role class

A role class should construct instances with a symbolic keyword argument from the symbol `Role.@ddo`, additionally, it can override this operation by providing a rhs magic `method ( ~assuming~ . ) { ... }` to return the assumed role instance.

   #}
  operator 10 (~assuming~) (lhv, rhv) {
    default rhv( @(Role.ddo)= lhv )
  }


  # %% #
  data D() pass

  # %% #
  o = D()
  ; o ~assuming~ SomeData

  # %#

}
