{## Data Context Interaction
 # - Separate perspectives of a program

  https://en.wikipedia.org/wiki/Data,_context_and_interaction

 #} {;
  {## Data Context Interaction #}
  export edh'dci = bookmark()

  # %% #
  data Point( x, y, ) pass

  # %% #

  {##
   # Root class of role classes

All role classes should suport instance construction from a symbolic keyword argument `@(Role.ddo)`

   #}
  class Role {

    {## Symbolic name for Domain Data Object #}
    symbol @ddo

    method __init__( *, @ddo as this.@ddo, *** ) scope(that).eval(
      expr extends {$ this.@ddo $}
    )

    method __repr__() {
      repr(this.@ddo) ++ ' ~assuming~ ' ++ repr(constructor(that))
    }

  }

  # %% #

  class OriginPoint : Point { extends Role

    method translate( p: Point ) case p of {
      { Point( x, y, ) } -> {
        case super.@(Role.ddo) of { Point( x= ox, y= oy, ) } -> {
          return Point( x - ox, y - oy, )
        }
        error('bug: ddo not a point: ' ++ desc(super.@(Role.ddo)))
      }
      error('Not a point: ' ++ desc(p) )
    }

  }

  # %% #

  {##
   # Let an object assuming a role class

A role class should construct instances with a symbolic keyword argument by the symbol `@(Role.ddo)`. Alternatively, it can override this operation by providing a rhs magic `method ( ~assuming~ . ) { ... }` to return the assumed role instance.

   #}
  operator 10 (~assuming~) (lhv, rhv) {
    default rhv( @(Role.ddo)= lhv )
  }


  # %% #
  let
  , pt = Point( 3, 5, )
  , o: OriginPoint = pt ~assuming~ OriginPoint

  # %%
  repr$ o

  # %%
  o.translate( Point( 2, 7, ) )

  # %%
  o.x

  # %%
  o.y

  # %%
  case o of {{ Point: raw'origin'point }}
  -> raw'origin'point is pt

  # %#
}
