{## Đ Language Basics #}

export {

  {## Syntax & Semantics
   # - Stylish Haskell/Go, blended into Python/JavaScript etc.
   #
   # The Đ syntax is designed with a major goal of interoperation by scripting,
   # for IPC across processes of heterogeneous runtime implementations.
   #
   # While some constructs from Haskell, Go, Python and others, are introduced
   # for purpose of ergonomics. E.g.
   #
   #  - custom infix operators, with arbitrary associativity and precedence
   #     * from Haskell, C++ etc.
   #
   #  - pattern matching & branching
   #     * from typical FP languages
   #
   #  - goroutine
   #     * from Go
   #
   #  - compositional object
   #     * sorta from Go's type embedding
   #
   #  - class based inheritance
   #     * from Python, Smalltalk etc.
   #
   #  - C3 linearized multiple inheritance
   #     * from Python, which is in turn from Dylan
   #
   #  - magic object methods
   #     * from Python
   #
   #  - prototype based inheritance
   #     * from JavaScript
   #
   #  - fat-arrow procedure (lambda)
   #     * from JavaScript, while the lambda aspect from all multi-paradigm
   #       languages with FP in mind, including JavaScript and Python
   #
   #} { import * './syntax'
    {## Đ Syntax #}
    edh'syntax = bookmark

    {## Usual, Common Part
     # - It's familiar from Python/JavaScript etc.
     #} { edh'common'syntax }

    {## Fancy Operators
     # - Let's go some Haskell stylish
     #} { edh'operators }

  }

  {## Utilities
   # -
   #} { import * './utils'
    {## Đ Utilities #}
    edh'utilities = bookmark

  }

  {## Commands
   # -
   #} { import * './cmds'
    {## Đ Commands #}
    edh'commands = bookmark

  }

}
