{## Đ Language Basics #}

export {

  {## Grammar
   # - Syntax, Semantics, and Pragmatics of Đ

The Đ grammar is designed with a major goal of interoperation by scripting,
for IPC across processes of heterogeneous runtime implementations.

While some constructs from Haskell, Go, Python and others, are introduced
for purpose of ergonomics. E.g.

- custom infix operators, with arbitrary associativity and precedence
    * from Haskell, C++ etc.

- pattern matching & branching
    * from typical FP languages, as well as upcoming PEP-634 of Python

- goroutine
    * from Go

- compositional object
    * sorta from Go type embedding, and C++ multiple-inheritance

- class based inheritance
    * from Python, Smalltalk etc.

- C3 linearized multiple inheritance
    * from Python, which is in turn from Dylan

- magic object methods
    * from Python

- data classes
    * from Python PEP-557

- prototype based inheritance
    * from JavaScript

- fat-arrow procedure (lambda)
    * from JavaScript, while the lambda aspect from all multi-paradigm
      languages with FP in mind, including JavaScript and Python

- symbols
    * from JavaScript, yet much enhanced

   #} {; import * './grammar'
    {##  Đ Grammar #}
    export edh'grammar = bookmark

  }


  {## Utilities
   # -
   #} {; import * './utils'
    {## Đ Utilities #}
    edh'utilities = bookmark

  }


  {## Commands
   # -
   #} {; import * './cmds'
    {## Đ Commands #}
    edh'commands = bookmark

  }

}
