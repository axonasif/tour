{##
 # Welcome to A Tour of Đ (Edh)
 #}


{## Troubleshooting
 # - Please use the issue tracker

If you ever met any incident when walking through this Tour, please consult
  http://github.com/e-wrks/tour/issues?q=is%3Aissue
to see whether it is a known issue and has solutions or workarounds.

In case no existing one solves your problem, please file a new issue, that'll help later comers from meeting the same trouble.

 #} {; }


{## Verify your IDE / EPM Setup
 # - Frictionless Developer Experience is a goal of Đ tooling

If you've setup your own local IDE (not on e.g. the Gitpod workspace), make sure all necessary IDE extensions have been installed, following:
  https://github.com/e-wrks/tour/blob/master/README.md#install-language-extensions

For Đ language support, install the extension pack:
  * Đ Language Pack
    https://marketplace.visualstudio.com/items?itemName=ComplYue.edh-vscode-pack
Or each extension individually (necessary for Eclipse Theia etc.):
  * Đ Syntax & Snippets
    https://marketplace.visualstudio.com/items?itemName=ComplYue.edh-vscode-syntax
  * Đ Code Formatter
    https://marketplace.visualstudio.com/items?itemName=ComplYue.edh-vscode-formatter
  * Đ Language Server
    https://marketplace.visualstudio.com/items?itemName=ComplYue.edh-vscode-lsc

For interactive Đ Code Lens:
  * HaskIt Đ - Haskell Software, Fast Iterations
    https://marketplace.visualstudio.com/items?itemName=ComplYue.haskit-vscode

For Haskell language support:
  * Haskell
    https://marketplace.visualstudio.com/items?itemName=haskell.haskell
  * Haskell Syntax Highlighting
    https://marketplace.visualstudio.com/items?itemName=justusadam.language-haskell

Also make sure an EPM home has been initialized with Đ developer tools, following:
  https://github.com/e-wrks/tour/blob/master/README.md#initialize-a-workspace

A Gitpod workspace will have all above automatically setup for you.


The Đ tooling struggles for ergonomics in software development, it achieves so on top of modern IDEs, with optimized workflows to build, test, demonstrate, and run software components.

The most preferable IDE is VSCode/VSCodium, and 2nd best is Gitpod (which is Eclipse Theia per se). Other IDEs such as SublimeText, Emacs, Vim, are not supported by far, merely lacking a LSP client component to communicate with `els`, they are hopefully to be supported in the future.

EPM is always under the hood, used to initialize (possibly cascaded) EPM homes, then install / update Đ packages from public or private Git repositories, into each EPM home. An Đ package consists of multiple Đ script files under `edh_modules` subdir, and optionally:

* A Haskell package, typically under `host.hs` subdir
* Some Python modules under `host.py` subdir
* Some JavaScript modules under `host.js` subdir
* More artifacts to support running Đ in different hosting environments

`epm` cli utility will organize all Haskell packages in an EPM home as both a *stack* project and a *cabal* project, under the `edh-universe` subdir, so it is suffice to build and install Haskell based Đ interpreters by simply running `stack install` or `cabal install` there, then the built interpreter programs can be used to run Đ modules and files.

Use `epm exec <prog>` or the shorthand `epm x <prog>` is a portable way to run Đ programs without installing them into system locations, it locates the nearest EPM home from the directory you run `epm`, and takes care of localized dependencies automatically.

The *Đ Language Server* `els` is such an Đ package per se, and needs to be built and installed such way for proper support of Đ software development from the IDE, including code navigation, which is crucial for the UX you'd take this tour nextly.

 #} {;

  {## Outline View, Breadcrumbs, Folding & etc.
   # - Navigability and browsability matters a lot

For HOWTOs, checkout:
  https://code.visualstudio.com/docs/editor/editingevolved

Make sure the *Outline* view is open, it is the live Table-of-Contents per opened module file.

Note by default, the outline view is located inside the left sidebar for VSCode, but is an expandable icon in the right bar for Gitpod/Theia.

Also checkout the dropdowns from the breadcrumbs on top of the editor, and be aware that's an expandable tree, not just static items.

Now try fold all regions of this file, press *F1* to bring out the command palette, keyin `fold` to filter the options, (better see keyboard shortcuts shown for each interesting commands as well, and select:
  `Fold All`
Then only level 1 titles should be visible, isn't it much neater to read?

Note there'll be icons clickable to expand the regions, on the vertical bar slightly right to the vertical bar showing line numbers (both on left to the editor).

   #} {; }

  {## Đ Terminal Sessions of REPL
   # - Good REPLs working nicely with Code Lens
   #} {;

    # You should see clickable labels in the following line:
    # %% Note this line is a cell marker (prefixed with `# %%`)
    # Try click [Run Cell] above, then select `edh Run: epm x edh` from the
    # popup list
    console.print( 'Hello, Đ world!' )

    # %% This line starts another cell
    let ( do's, don'ts, ) = (
      [ 'feel it', 'experience it',
        'keep things up-to-date', ],
      [ "merely read it", 'literally remember it',
        'leave yourself outdated', ],
    )
    for ( todo, to'not'do ) from zip( do's, don'ts ) do {
      console.print$ 'Do ' ++ todo ++ ", don't " ++ to'not'do ++ '!'
    }

    # %# Note this line is an end-of-cell marker (prefixed with `# %#`)

    {#
A new Đ terminal session should be starated, and a cell qua a piece of code get executed in the terminal, when you click [Run Cell] above it.

Note that Gitpod/Theia's *Integrated Terminal* is less frictionless than VSCode's atm, it may not work well the first time you click `Run Cell`, don't worry, it's fairly safe to click the link more times, repeat a few times, it should eventually work correctly.
     #}

    {#
Also note you are free to interact with the REPL in the terminal, just like a traditional one you started from command line.
     #}

    {#
Also also note, you can run multiple Đ terminal sessions within an IDE, running same or different command lines, to start one more, press *F1* to bring out the command palette, keyin `edh` then select the option:

  `Edh: New Đ Terminal`

For HOWTOs, checkout:
  https://code.visualstudio.com/docs/editor/integrated-terminal#_managing-multiple-terminals
     #}
  }

}


{## Ready! Here You Start
 # - Code Navigation can be extremely useful

Recall how to "Go To Definition":
  https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition
And an addendum for how to navigate back:
  https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_go-to-definition

Note in Đ, the import source specification can be Cmd/Ctrl + Clicked to go to its definition - i.e. to open its corresponding module file, you can take advantage of that, so the rest contents in this module contain many links porting you to interesting places.

E.g. hover your mouse cursor over the string 'tour' after `import * ` below, hold down Cmd (on macOS) or Ctrl (on Linux), you should see it underlined, then click left-mouse-button, there you go!

(You know how to come back, don't you?)

Note you can also move your input cursor by keyboard or mouse click, into 'tour' then press the shortcut key (usually F12), that works the same way.
 #} { import * 'tour' }


{## Đ The Language
 # - Using just the bare interpreter with default batteries

 For brevity, this module here shows only quick runnable cells with short  comments. Run them and if you recognize the result with satisfying  reasonability, that's great and you are good! If not, follow the imports  and bookmarks (by "Go To Definition" as you've learned) into its original  source, there'll be elaborate explanations and more examples to help you  understand.
 #} {;

  {## Language Basics
   # - Syntax, Utilities, Commands, ...
   #} { import * './edh/basics' # <- navigable for elaborate source

    {## Syntax
     # - Đ Syntax
     #} { edh'syntax # <- navigable bookmark

    }

    {## Utilities
     # - Đ Utilities
     #} { edh'utilities # <- navigable bookmark

    }

  }

}


{## Networked Đ
 # - Yet another abstraction of networking for IPC and RPC

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'swarm/tour' }


{## HasDim
 # - Do Object-Oriented Dimensional-Modeling

Vectorized High Performance Numeric Computing with NVM (e.g. disk) backed SIMD ready arrays should be the norm.

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'dim/tour' }


{## HaskIt
 # - Interactive workbench with easy yet powerful visualizations

Under the hood is BokehJS, for Data / Idea · Exploration / Exposition.

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'haskit/tour' }


{## Swarming Đ
 # - Run jobs with parallel computing power

Put up your own swarms of servers on premise, with possibily high-dimensional data efficiently shared as ND arrays.

It is capable of scheduling Pandas / Numpy / C/C++ based Python works, as well as HasDim / Haskell based Đ works, forming heterogeneous pipelines, where the same copies of NVM (e.g. disk) backed ND arrays are shared and pipelined amongst arbitrary components.

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'swarm/tour' }


{## How Đ Language Server Works
 # - Wonder why you can take this tour like it is?

That Tour is some different, I'd just send you there from here.

 #} { import * 'els/tour' }
