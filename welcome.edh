{##
 # Welcome to A Tour of Đ (Edh)

This tour is more like a self-guided walkthrough than a typical tutorial, you are not supposed to follow the text run in any particular order, materials are organized in cyclic hierarchies actually, with the principle that shallower contents should be more brief, while deeper contents to provide more elaborate explainations and showcases of greater verbosity.

It is designed for reading efficiency & pleasure. We try not bore experienced readers with unnecessary details, while for readers unfamiliar with certain programming concepts, in elsewhere we craft elaborate explaination and more live examples of greater verbosity, then make those artifacts linked to briefs. The reader can use standard code navigation capability of the IDE to follow those links into greater details. Note that becomes hierarchies of materials with many interconnections.

Clever readers, even noob to some concept, can merely run relevant Code Lens and try comprehend the output result, good intuition is already enough at times. After all, code navigation is your freedom, go back and forth, any time, any where, for whatever reason, just remember you can right-mouse-click most highlighted code elements in any Đ file (with `bookmark`s even dedicated for this purpose), then select [Go To Definition] to navigate to elaborate definition (explaination) of it. The tooltip shown up when you hover the mouse cursor over it may already give some useful information.

Experiences in other programming languages, Python, JavaScript, Go, Haskell and etc. are good source of intuition to complete this tour faster, but never a necessarity.

This tour is open, as a public Github repository welcoming contributions, and hopefully it will evolve to be a general learning resource for advanced computer application practices, enabling *Citizen Development* at all.

  http://github.com/e-wrks/tour

 #}


{## Troubleshooting
 # - Please use the issue tracker

If you ever met any incident when walking through this tour, please consult
  http://github.com/e-wrks/tour/issues?q=is%3Aissue
to see whether it is a known issue and has solutions or workarounds.

In case no existing one solves your problem, please file a new issue, that'll help later comers from meeting the same trouble.

Even difficulties in understanding count, let's figure out how to improve the experience for people from a similar background of you.

 #} {; }


{## Pre-Flight Checks
 # - Verify your IDE / EPM Setup

Frictionless Developer Experience is a goal of Đ tooling

A Gitpod workspace (Eclipse Theia IDE on the cloud) can have the necessary IDE features & tools setup for you automatically, in case that's what you want, use this link:
  https://gitpod.io/#https://github.com/e-wrks/tour

Or you've decided to setup your own local IDE for better experience, see:
  https://github.com/e-wrks/tour#seasoned-and-ux-rich-way---local-ide


The Đ tooling struggles for ergonomics in software development, it achieves so on top of modern IDEs, with optimized workflows to build, test, demonstrate, and run relevant software components.

The most preferable IDE is VSCode/VSCodium, and 2nd best is Gitpod (which is Eclipse Theia per se). Other IDEs such as SublimeText, Emacs, Vim, are not supported by far, merely lacking a LSP client component to communicate with `els`, they are hopefully to be supported in the future.

EPM is always under the hood, used to initialize (possibly cascaded for localized dependencies) EPM homes, Đ packages from public or private Git repositories, are installed into each EPM home, and updated as a whole.

An Đ package consists of multiple Đ script files under `edh_modules` subdir, and optionally:

* A tour for the package on its own right, typicaly under `edh_modules/<pkg-name>/tour` subdir
* A Haskell package, typically under `host.hs` subdir
* Some Python modules under `host.py` subdir
* Some JavaScript modules under `host.js` subdir
* More artifacts to support running Đ in different hosting environments

`epm` cli utility will organize all Haskell packages in an EPM home as both a *stack* project and a *cabal* project, under the `edh-universe` subdir, so it is suffice to build and install Haskell based Đ interpreters by simply running `stack install` or `cabal install` there, then the built interpreter programs can be used to run Đ modules and files.

Use `epm exec <prog>` or the shorthand `epm x <prog>` is a portable way to run Đ programs without installing them into system locations, it locates the nearest EPM home from the directory you run `epm`, and takes care of localized dependencies automatically.

The *Đ Language Server* `els` is such an Đ package per se, and needs to be built and installed such way for proper support of Đ software development from the IDE, including code navigation, which is crucial for the UX you'd take this tour nextly.

 #} {;

  {## Navigating a Single Module
   # - Use the Outline, Breadcrumbs, Folding for great good

For general IDE guidelines and HOWTOs, checkout:
  https://code.visualstudio.com/docs/editor/editingevolved

The tricks particularly helpful in browsing a single module (such as this file `welcome.edh`) is Outline, Breadcrumbs, and Folding.

* Outline
 > The outline is the live Table-of-Contents per opened module file, it updates as you modifying the file, and titles briefly shown there can be clicked, to take you to the location in the file.
 > It's essential to quick jump to the content you want to read.
 > Note by default, the outline view is located inside the left sidebar for VSCode, but is an expandable icon in the right bar for Gitpod/Theia.
 > And there are VSCode-only features such as [Follow Cursor], [Filter on Type], and various sorting options. Hope Theia support them as well one day.

* Breadcrumbs
 > The breadcrumbs bar is on top of the editor, it shows where current input cursor is located within the hierarchy of current module, and you can click any node to have a drop-down menu at that level, be aware that's an expandable tree, not just a static item list. It manifests the same document hierarchy as the outline view.

* Folding
 > Press *F1* to bring out the command palette, keyin `fold` to filter the options, (better see keyboard shortcuts shown for each interesting commands as well, and select:
  "Fold All"
 > Then only level 1 titles should be visible, isn't it much neater to read?
 > And hope you are not lost, figured out how to expand each section and finally made back here.

   #} {;
    {## Navigating a Single Module #}
    export edh'modu'navi = bookmark
  }


  {## Đ Terminal Sessions of REPLs
   # - Good REPLs working nicely with Code Lens
   #} {;
    {## Đ Terminal Sessions of REPLs #}
    export edh'term'repls = bookmark

    # You should see clickable labels in the following line:
    # %% Note this line is a cell marker (prefixed with `# %%`)
    # Try click [Run Cell] above, then select `edh Run: epm x edh` from the
    # popup list
    console.print( 'Hello, Đ world!' )

    # %% This line starts another cell
    let ( do's, don'ts, ) = (
      [ 'feel it', 'experience it',
        'keep things up-to-date', ],
      [ "merely read it", 'literally remember it',
        'leave yourself outdated', ],
    )
    for ( todo, to'not'do ) from zip( do's, don'ts ) do {
      console.print$ 'Do ' ++ todo ++ ", don't " ++ to'not'do ++ '!'
    }

    # %# Note this line is an end-of-cell marker (prefixed with `# %#`)

    {#
A new Đ terminal session should be starated, and a cell qua a piece of code get executed in the terminal, when you click [Run Cell] above it.

Note that Gitpod/Theia's *Integrated Terminal* is less frictionless than VSCode's atm, it may not work well the first time you click `Run Cell`, don't worry, it's fairly safe to click the link more times, repeat a few times, it should eventually work correctly.
     #}

    {#
Also note you are free to interact with the REPL in the terminal, just like a traditional one you started from command line.
     #}

    {#
Also also note, you can run multiple Đ terminal sessions within an IDE, running same or different command lines, to start one more, press *F1* to bring out the command palette, keyin `edh` then select the option:

  "Edh: New Đ Terminal"

For how to managing multiple terminal sessions, checkout:
  https://code.visualstudio.com/docs/editor/integrated-terminal#_managing-multiple-terminals
     #}
  }


  {## Navigating the World
   # - Wandering amongst interconnected places

"Go To Definition" is really versatile, also there's a trick to navigate back:
  https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_go-to-definition
And you'd better find the keyboard shortcut (usually F12 and Ctrl^- or Ctrl^Alt^-) and use wisely.

Among usual references, an import in Đ can respond to "Go To Definition" requests too, so Cmd/Ctrl + Click can open its corresponding module file.

You can make good use of this feature, e.g. point your mouse cursor at the string 'tour' after `import * ` below, then hold down Cmd (on macOS) or Ctrl (on Linux), you should see it underlined, then click left-mouse-button, there you go!

Note you can also place your keyboard cursor into 'tour' below, by either arrow keys or mouse click, then press the shortcut key (usually F12), that works the same way.

   #} {; import * 'tour'

    # `bookmark` is a special type of artifact (a `Command` per se) that
    # dedicated to anchor a particular location in codebase, allowing links
    # from anywhere by code navigation.
    #
    # Try hover on `what's'edh` below and see the tooltip,
    # then "Go To Definition" of it
    what's'edh # <- this links to a location in the language tour

    # As well, we expose a bookmark linking to just here
    {## Navigating the World #}
    export edh'world'navi = bookmark
  }

}


{## Ready! Here You Start
 # - Code Navigation can be extremely useful

Assuming the [Pre-Flight Checks] are all good for you, it is important not only in taking this tour, as well it'll give you great power in software development workflows, with or without Đ.

The rest contents in this module contain many links that can teleport you to various places of interest.

 #} {; }


{## Đ the Language
 # - A Business Integration language, as well as a User Interface language

The birth of Đ has two main goals:

 * To integrate distributed, heterogeneous software components to achieve business goals
  > Đ fosters comprehensive support for _event_s to be exchanged and hosted, asynchronously, at multiple application / deployment sites, as well as within a local process by the operating system.
  > An _event_ is an atomic piece of data, encapsulating the information of something just happend in one place, and sent to another place for its consequences to be realized there. _Event_ is conceptually coherent to *Algebraic Data Type* in mathematics as well as a functional programming language, but it's not practical to be a mechanical utility in a procedural langauge like Đ. So _event_ stays conceptual in Đ the language.

 * To be directly usable by users of all roles in the organization, especially stake-holders of the business
  > Đ is even more _dynamic_, _interactive_ than Python, from standalone REPLs to WebREPLs, to the extensive IDE features, it's fine-tuned for frictionless developer experience, where anyone could be the developer.

 #} {; import * 'tour'

  {## Language Basics
   # - Syntax, Utilities, Commands, ...
   #} { import * './edh/basics' # <- navigable for elaborate source

    {## Syntax
     # - Đ Syntax
     #} { edh'syntax # <- navigable bookmark

    }

    {## Utilities
     # - Đ Utilities
     #} { edh'utilities # <- navigable bookmark

    }

  }

}


{## Networked Đ
 # - Yet another abstraction of networking for IPC and RPC

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'swarm/tour' }


{## HasDim
 # - Do Object-Oriented Dimensional-Modeling

Vectorized High Performance Numeric Computing with NVM (e.g. disk) backed SIMD ready arrays should be the norm.

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'dim/tour' }


{## HaskIt
 # - Interactive workbench with easy yet powerful visualizations

Under the hood is BokehJS, for Data / Idea · Exploration / Exposition.

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'haskit/tour' }


{## Swarming Đ
 # - Run jobs with parallel computing power

Put up your own swarms of servers on premise, with possibily high-dimensional data efficiently shared as ND arrays.

It is capable of scheduling Pandas / Numpy / C/C++ based Python works, as well as HasDim / Haskell based Đ works, forming heterogeneous pipelines, where the same copies of NVM (e.g. disk) backed ND arrays are shared and pipelined amongst arbitrary components.

An "Đ Terminal Session" running different interpreter (REPL) would be needed to run "Code Lens" there, "Go To Definition" of the following import to take the Tour there.

 #} { import * 'swarm/tour' }


{## How Đ Language Server Works
 # - Wonder why you can take this tour like it is?

That Tour is some different, I'd just send you there from here.

 #} { import * 'els/tour' }
